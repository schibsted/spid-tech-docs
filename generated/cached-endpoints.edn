[{:path "endpoints",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions
  {:name
   "The name of the endpoint (see the full endpoint listing for names)",
   :url
   "The url of the endpoint to describe (see the full endpoint listing for names)"},
  :method "GET",
  :name "List API endpoints",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional ["name" "url"],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "A list of endpoint objects",
      :type "[endpoint]"}
     {:status 400,
      :description "url parameter did not match any endpoints",
      :type "api-exception"}
     {:status 400,
      :description "name parameter did not match any endpoints",
      :type "api-exception"}]}},
  :url "/api/2/endpoints",
  :pathParameters [],
  :controller "Api/2/Utility.endpoints",
  :defaultOutputFormat "json",
  :description
  "List information about all API endpoints, or get info on single endpoint (specify name or url).",
  :category ["Utilities" "Platform API"]}
 {:path "describe/{object}",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions
  {:object
   "The object to describe. Possible values:\n\n* `User`\n* `Address`\n* `Email`\n* `Phone`\n* `Product`\n* `BundleItem`\n* `Subscription`\n* `Content`\n* `Discount`\n* `Identifier`\n* `Campaign`\n* `Utilities`\n* `Voucher`",
   :property
   "The property to describe. To get a list of possible values, get the full description of an object.",
   :locale "One of the supported [locales](/endpoints/#locales)"},
  :method "GET",
  :name "Describe properties",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional ["property" "locale"],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description
      "Returns a localized description of and object's enumerable properties. If the\n                                          property parameter was provided, only this property is described. The returned\n                                          object has the property name(s) as key(s) and an object of possibles values as\n                                          keys, and localized descriptions as values.",
      :type "object"}
     {:status 400,
      :description "Missing required parameter object",
      :type "api-exception"}
     {:status 404,
      :description "No description found for this object",
      :type "api-exception"}]}},
  :url "/api/2/describe/{object}",
  :pathParameters ["object"],
  :controller "Api/2/Utility.describe",
  :defaultOutputFormat "json",
  :description
  "Describe an object's properties, optionally translated.",
  :category ["Utilities" "Platform API"]}
 {:path "status",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions {},
  :method "*",
  :name "Platform status",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional [],
    :accessTokenTypes [],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns the current status of the API. ",
      :type "status"}]}},
  :url "/api/2/status",
  :pathParameters [],
  :controller "Api/2/Platform.status",
  :defaultOutputFormat "json",
  :description "Get status information from the platform",
  :category ["Utilities" "Platform API"]}
 {:path "version",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions {},
  :method "GET",
  :name "Platform version",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional [],
    :accessTokenTypes [],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description
      "Returns a description of the currently deployed SPiD version",
      :type "version"}]}},
  :url "/api/2/version",
  :pathParameters [],
  :controller "Api/2/Platform.version",
  :defaultOutputFormat "json",
  :description "Find out what version you are using",
  :category ["Utilities" "Platform API"]}
 {:path "terms",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions
  {:client_id
   "Retrieve the terms for this client. If not provided, the SPiD terms are returned.",
   :oauth_token
   "OAuth token for a user whose accepted flag should be changed",
   :not_accepted
   "Control which terms are controlled on behalf of the user. When 1, check if the user has accepted the SPiD terms. When 0, check that the user has accepted the client terms."},
  :method "GET",
  :name "Platform terms",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional ["client_id" "oauth_token" "not_accepted"],
    :accessTokenTypes [],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description
      "The current terms, and whether they are accepted by the user, if a user token is provided.",
      :type "terms"}]}},
  :url "/api/2/terms",
  :pathParameters [],
  :controller "Api/2/Platform.terms",
  :defaultOutputFormat "json",
  :description
  "Returns the current user terms for the client and SPiD",
  :category ["Utilities" "Platform API"]}
 {:path "token/{token}/authentication",
  :validOutputFormats ["json"],
  :parameterDescriptions
  {:token
   "Token provided by the API consumer to the API service, the token to check."},
  :method "GET",
  :name "Token authentication",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional [],
    :accessTokenTypes [],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Valid token informations",
      :type "token"}
     {:status 404,
      :description "Token is invalid",
      :type "api-exception"}]}},
  :url "/api/2/token/{token}/authentication",
  :pathParameters ["token"],
  :controller "Api/2/Token.token_authentication",
  :defaultOutputFormat "json",
  :description
  "Provides API services a means of validating and authenticating requests done to them by checking the token",
  :category ["Token" "Token API"]}
 {:path "user/{id}/eid",
  :validOutputFormats ["json"],
  :parameterDescriptions {:id "User ID"},
  :method "GET",
  :name "Get user verification level",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional [],
    :accessTokenTypes [],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description
      "Returns a verification level and verified data of user",
      :type "eiduser"}
     {:status 410, :description "User banned", :type "api-exception"}
     {:status 404,
      :description "User not verified",
      :type "api-exception"}
     {:status 403,
      :description "Token is not authorized to access this user",
      :type "api-exception"}]}},
  :url "/api/2/user/{id}/eid",
  :pathParameters ["id"],
  :controller "Api/2/Eid.eid",
  :defaultOutputFormat "json",
  :description
  "Find out if a user has a verification level and the data he has through that",
  :category ["eID" "eID Verification API"]}
 {:path "eid/init",
  :validOutputFormats ["json"],
  :parameterDescriptions
  {:hash
   "A [verified request hash](/verified-hash/) signed with your client sign secret."},
  :method "POST",
  :name "Initialize a eID verification process",
  :httpMethods
  {:POST
   {:name "POST",
    :required ["ssn" "userId" "hash"],
    :optional [],
    :accessTokenTypes [],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "returns eID initialization object",
      :type "eidinit"}
     {:status 400,
      :description "Only active users can have eID",
      :type "api-exception"}
     {:status 400,
      :description "ssn is required",
      :type "api-exception"}
     {:status 400,
      :description "userId is required",
      :type "api-exception"}
     {:status 400,
      :description "User is already verified",
      :type "api-exception"}
     {:status 400,
      :description "User is banned from eID",
      :type "api-exception"}
     {:status 400,
      :description "User is blocked for verification",
      :type "api-exception"}
     {:status 400,
      :description "SSN is blocked for verification",
      :type "api-exception"}
     {:status 400,
      :description "SSN is taken by other user",
      :type "api-exception"}
     {:status 400,
      :description
      "User has been verified with another SSN in the past",
      :type "api-exception"}
     {:status 403,
      :description "Invalid verification hash",
      :type "api-exception"}
     {:status 403,
      :description "Token is not authorized to access this user",
      :type "api-exception"}]}},
  :url "/api/2/eid/init",
  :pathParameters [],
  :controller "Api/2/Eid.init_eid",
  :defaultOutputFormat "json",
  :description
  "Start a verification process and get an eID initialization reference to use to complete the process",
  :category ["eID" "eID Verification API"]}
 {:path "eid/complete",
  :validOutputFormats ["json"],
  :parameterDescriptions
  {:hash
   "A [verified request hash](/verified-hash/) signed with your client sign secret.",
   :initRef "The initRef returned from the eID init call",
   :verifiedFields
   "Valid JSON containing the verified fields you would like to store"},
  :method "POST",
  :name "Complete verification process",
  :httpMethods
  {:POST
   {:name "POST",
    :required ["userId" "ssn" "verifiedFields" "hash" "initRef"],
    :optional [],
    :accessTokenTypes [],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description
      "Returns a verification level and verified data of user",
      :type "eiduser"}
     {:status 400,
      :description "ssn is required",
      :type "api-exception"}
     {:status 400,
      :description "userId is required",
      :type "api-exception"}
     {:status 400,
      :description "verifiedFields is required",
      :type "api-exception"}
     {:status 400, :description "eID not valid", :type "api-exception"}
     {:status 400,
      :description "eID not initialized",
      :type "api-exception"}
     {:status 400,
      :description "Failed to create eID",
      :type "api-exception"}
     {:status 400,
      :description "User changed since init",
      :type "api-exception"}
     {:status 403,
      :description "Invalid verification hash",
      :type "api-exception"}
     {:status 403,
      :description "Token is not authorized to access this user",
      :type "api-exception"}]}},
  :url "/api/2/eid/complete",
  :pathParameters [],
  :controller "Api/2/Eid.complete_eid",
  :defaultOutputFormat "json",
  :description
  "Provide the remaining lockable fields and the verification data (legal address)",
  :category ["eID" "eID Verification API"]}
 {:path "oauth/exchange",
  :validOutputFormats ["json"],
  :parameterDescriptions
  {:clientId
   "The ID of a client belonging to the same merchant as the calling client.",
   :type "The type of exchange, either `code` or `session`.",
   :redirectUri
   "Used with type `session`. The redirect URI must be a registered redirectUri, otherwise the request will be rejected."},
  :method "POST",
  :name "Exchange",
  :httpMethods
  {:POST
   {:name "POST",
    :required ["clientId" "type"],
    :optional ["redirectUri"],
    :accessTokenTypes ["user"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "OAuth exchange object",
      :type "exchange"}
     {:status 400,
      :description "Required client ID missing",
      :type "api-exception"}
     {:status 400,
      :description "Type session: Missing redirect URI",
      :type "api-exception"}
     {:status 400,
      :description
      "Type code: Client to exchange token with is missing a default redirect",
      :type "api-exception"}
     {:status 400,
      :description "Request must contain a valid exchange type",
      :type "api-exception"}
     {:status 403,
      :description
      "Provided client ID does not belong to the current merchant",
      :type "api-exception"}]}},
  :url "/api/2/oauth/exchange",
  :pathParameters [],
  :controller "Api/2/Authorization.exchange",
  :defaultOutputFormat "json",
  :description "Exchanges an authorization code",
  :category ["Authorization" "Token API"]}
 {:path "user/{id}/dataobject/{key}",
  :validOutputFormats ["json"],
  :parameterDescriptions
  {:id "ID of the user to associate data with",
   :key "The data object key. Max length is 255 bytes.",
   :value "Data of any kind. Max length is 65535 bytes."},
  :method "*",
  :name "Get, update, and delete data objects by user",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional [],
    :accessTokenTypes ["server" "user"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description
      "Retrieves the data object stored under this key for this user. The format of the data object is entirely dictated by the client and may be of any type.",
      :type "data-object"}
     {:status 400,
      :description "Missing id and/or key parameters",
      :type "api-exception"}
     {:status 403,
      :description "Token is not authorized to access this user",
      :type "api-exception"}
     {:status 404,
      :description "No data object found for this key",
      :type "api-exception"}]},
   :POST
   {:name "POST",
    :required ["value"],
    :optional [],
    :accessTokenTypes ["server" "user"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 201,
      :description "The newly created data object.",
      :type "data-object"}
     {:status 400,
      :description "One or more required parameters are missing",
      :type "data-object"}
     {:status 400,
      :description "Missing id and/or key parameters",
      :type "api-exception"}
     {:status 400,
      :description
      "Could not find any data object for the provided key",
      :type "api-exception"}
     {:status 403,
      :description "Token is not authorized to access this user",
      :type "api-exception"}]},
   :DELETE
   {:name "DELETE",
    :required [],
    :optional [],
    :accessTokenTypes ["server" "user"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description
      "Returns an object indicating whether or not deleting was successful.",
      :type "success-indicator"}
     {:status 400,
      :description "Missing id and/or key parameters",
      :type "api-exception"}
     {:status 503,
      :description "Token is not authorized to access this user",
      :type "api-exception"}]}},
  :url "/api/2/user/{id}/dataobject/{key}",
  :pathParameters ["id" "key"],
  :controller "Api/2/DataObject.user_dataobject",
  :defaultOutputFormat "json",
  :description "User data storage.",
  :category ["Data Storage" "DataObjects API"]}
 {:path "user/{id}/asset/{assetId}",
  :validOutputFormats ["json"],
  :parameterDescriptions
  {:id "ID of the user to associate data with",
   :assetId "The asset id. Max length is 255 bytes.",
   :accessUntil
   "If set, access will be denied after this date time. (\"Y-m-d H:i:s\")"},
  :method "*",
  :name "User access.",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional [],
    :accessTokenTypes ["server" "user"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns true if the user has access.",
      :type "asset-access"}
     {:status 400,
      :description "Multiple ids provided",
      :type "api-exception"}
     {:status 403,
      :description "User does not have access",
      :type "api-exception"}]},
   :POST
   {:name "POST",
    :required [],
    :optional ["accessUntil"],
    :accessTokenTypes ["server" "user"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns the data inserted or updated.",
      :type "asset-access"}
     {:status 400,
      :description
      "Incorrect input data (date format or multiple ids)",
      :type "api-exception"}
     {:status 403,
      :description "Access to the user data was denied",
      :type "api-exception"}]},
   :DELETE
   {:name "DELETE",
    :required [],
    :optional [],
    :accessTokenTypes ["server" "user"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200, :description "Deleted asset", :type "asset-access"}
     {:status 400,
      :description "Multiple ids provided",
      :type "api-exception"}
     {:status 403,
      :description "Access to the user data was denied",
      :type "api-exception"}
     {:status 404,
      :description "User record not found",
      :type "api-exception"}]}},
  :url "/api/2/user/{id}/asset/{asset_id}",
  :pathParameters ["id" "assetId"],
  :controller "Api/2/Assets.user_asset",
  :defaultOutputFormat "json",
  :description
  "Get, update, and delete asset access by user. Post accepts accessUntil as part of body to reflect timed access.",
  :category ["Asset ID" "Asset access check"]}
 {:path "user/{id}/assets/{assetIds}",
  :validOutputFormats ["json"],
  :parameterDescriptions
  {:id "ID of the user to associate data with",
   :assetIds
   "The comma-separated asset ids. Max length is 255 bytes."},
  :method "*",
  :name "Check if user has access to comma-separated values",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional [],
    :accessTokenTypes ["server" "user"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns array with assets user has access to",
      :type "asset-access"}
     {:status 403,
      :description "User does not have access",
      :type "api-exception"}]}},
  :url "/api/2/user/{id}/assets/{asset_id}",
  :pathParameters ["id" "assetIds"],
  :controller "Api/2/Assets.user_assets",
  :defaultOutputFormat "json",
  :description "Check if user has access to comma-separated values",
  :category ["Asset ID" "Asset access check"]}
 {:path "user/{id}/assets",
  :validOutputFormats ["json"],
  :parameterDescriptions {:id "ID of the user to associate data with"},
  :method "*",
  :name "Get assets user has access to, access by user",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional [],
    :accessTokenTypes ["server" "user"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns array with assets user has access to",
      :type "asset-access"}
     {:status 403,
      :description "User does not have any access to assets",
      :type "api-exception"}]}},
  :url "/api/2/user/{id}/assets",
  :pathParameters ["id"],
  :controller "Api/2/Assets.user_assets",
  :defaultOutputFormat "json",
  :description
  "Get array of assets user has access to, access by user",
  :category ["Asset ID" "Asset access check"]}
 {:path "asset/{id}/users/count",
  :validOutputFormats ["json"],
  :parameterDescriptions
  {:id "ID of the asset to associate data with"},
  :method "*",
  :name "Get count of users that have access to specific asset.",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional [],
    :accessTokenTypes ["server" "user"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns count of users with access to asset",
      :type "asset-access"}
     {:status 403,
      :description "Asset is not accessed by any user",
      :type "api-exception"}]}},
  :url "/api/2/asset/{id}/users/count",
  :pathParameters ["id"],
  :controller "Api/2/Assets.asset_users_count",
  :defaultOutputFormat "json",
  :description "Count of user that have access to specific asset.",
  :category ["Asset ID" "Asset access check"]}
 {:path "user/{id}/dataobjects",
  :validOutputFormats ["json"],
  :parameterDescriptions
  {:id "ID of the user the data is associated with",
   :key
   "Only show data for this key. Supports [multiple values](/endpoints/#parameters).",
   :sort ""},
  :method "*",
  :name "List data objects by user",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional
    ["key" "limit" "since" "offset" "until" "sort" "filters"],
    :accessTokenTypes ["server" "user"],
    :filters ["merchant" "updated"],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description
      "Retrieves all data objects associated with this user.",
      :type "{dataObjectId data-object}"}
     {:status 400,
      :description "Missing ID parameter",
      :type "api-exception"}
     {:status 403,
      :description "Token is not authorized to access this user",
      :type "api-exception"}
     {:status 404,
      :description "No data objects found",
      :type "api-exception"}]}},
  :url "/api/2/user/{id}/dataobjects",
  :pathParameters ["id"],
  :controller "Api/2/DataObject.user_dataobjects",
  :defaultOutputFormat "json",
  :description "List data objects stored for a user.",
  :category ["Data Storage" "DataObjects API"]}
 {:path "dataobjects",
  :validOutputFormats ["json"],
  :parameterDescriptions
  {:key
   "The client-provided data object key. Supports [multiple values](/endpoints/#parameters).",
   :sort ""},
  :method "*",
  :name "List",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional
    ["key" "limit" "since" "offset" "until" "sort" "filters"],
    :accessTokenTypes ["server"],
    :filters ["merchant" "updated"],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Retrieves a single data object.",
      :type "{dataObjectId data-object}"}
     {:status 404,
      :description "No data objects found",
      :type "api-exception"}]}},
  :url "/api/2/dataobjects",
  :pathParameters [],
  :controller "Api/2/DataObject.dataobjects",
  :defaultOutputFormat "json",
  :description "Data storage list endpoint.",
  :category ["Data Storage" "DataObjects API"]}
 {:path "email/{email}/status",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions {:email "The email to query status for."},
  :method "GET",
  :name "Status",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional [],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns a status description.",
      :type "email-status"}
     {:status 400,
      :description "Missing parameter email",
      :type "api-exception"}
     {:status 400,
      :description
      "Email parameter did not properly base64 decode into a valid email",
      :type "api-exception"}]}},
  :url "/api/2/email/{email}/status",
  :pathParameters ["email"],
  :controller "Api/2/Email.email_status",
  :defaultOutputFormat "json",
  :description
  "Get verification and availability status for an email address.",
  :category ["Identity Management" "Identifier Status API"]}
 {:path "phone/{phone}/status",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions
  {:phone "The phone number to query status for."},
  :method "GET",
  :name "Status",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional [],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns a status description.",
      :type "phone-status"}
     {:status 400,
      :description "Missing parameter phone",
      :type "api-exception"}
     {:status 400,
      :description
      "Phone parameter did not properly base64 decode into a valid phone number",
      :type "api-exception"}]}},
  :url "/api/2/phone/{phone}/status",
  :pathParameters ["phone"],
  :controller "Api/2/Phone.phone_status",
  :defaultOutputFormat "json",
  :description
  "Get verification and availability status for an phone address.",
  :category ["Identity Management" "Identifier Status API"]}
 {:path "me",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions {},
  :method "GET",
  :name "Me",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional [],
    :accessTokenTypes ["user"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200, :description "The user object", :type "user"}]}},
  :url "/api/2/me",
  :pathParameters [],
  :controller "Api/2/User.me",
  :defaultOutputFormat "json",
  :description "Fetch the authorized requesting user.",
  :category ["Identity Management" "User API"]}
 {:path "signin",
  :validOutputFormats ["json"],
  :parameterDescriptions
  {:identifier "Email of the user",
   :redirectUri
   "Where to redirect the user after completing signin request"},
  :method "POST",
  :name "Signin",
  :httpMethods
  {:POST
   {:name "POST",
    :required ["identifier" "redirectUri"],
    :optional ["context"],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 201,
      :description "Created a new signin request",
      :type "object"}
     {:status 302,
      :description "The email address is blocked",
      :type "api-exception"}
     {:status 400,
      :description "Signin request could not be created",
      :type "api-exception"}
     {:status 400,
      :description "Required identifier parameter is missing",
      :type "api-exception"}
     {:status 400,
      :description "Required identifier parameter is invalid",
      :type "api-exception"}
     {:status 400,
      :description "Required redirectUri parameter is missing",
      :type "api-exception"}
     {:status 400,
      :description
      "Required redirectUri parameter is invalid or not matching requesting client",
      :type "api-exception"}
     {:status 409,
      :description "Signin request could not be created",
      :type "api-exception"}]}},
  :url "/api/2/signin",
  :pathParameters [],
  :controller "Api/2/User.user_signin",
  :defaultOutputFormat "json",
  :description
  "Passwordless signin (login/signup user based on provided identifier)",
  :category ["Identity Management" "Authentication API"]}
 {:path "user",
  :validOutputFormats ["json" "jsonp" "png"],
  :parameterDescriptions
  {:gender
   "Gender. Legal values and a localized description can be fetched from [/api/2/describe/User?property=gender](/endpoints/GET/describe/{object}/).",
   :name "Full name",
   :locale
   "Preferred user language. By default it is nb_NO for Norway, and sv_SE for Sweden. You can also use en_US, es_ES, ca_ES and eu_ES.",
   :photo "URL to a profile photo",
   :displayName "The user's preferred display name",
   :utcOffset
   "The user's timezone, given as UTC offset (number of hours), e.g. \"+02:00\" etc",
   :url "An external URL related to the user",
   :preferredUsername "The user's preferred user name",
   :addresses
   "A JSON string. A map of addresses, with the address type as keys and the address objects/maps as values. See [the address type](/types/address/) for appropriate types",
   :birthday "The date of birth, YYYY-MM-DD",
   :redirectUri
   "When the user is created, they will receive an email to confirm. After completing registration, they will be redirected to this URL if specified. If not specified, the user is redirected to the client default redirectUri."},
  :method "POST",
  :name "Create user",
  :httpMethods
  {:POST
   {:name "POST",
    :required ["email"],
    :optional
    ["displayName"
     "name"
     "birthday"
     "addresses"
     "gender"
     "photo"
     "preferredUsername"
     "url"
     "utcOffset"
     "redirectUri"
     "locale"],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 201,
      :description "Returns the newly created user object.",
      :type "user"}
     {:status 302,
      :description "Verified user already present.",
      :type "user"}
     {:status 401,
      :description "Users cannot be create using an user token.",
      :type "api-exception"}
     {:status 409,
      :description "The email address is not available.",
      :type "api-exception"}]}},
  :url "/api/2/user",
  :pathParameters [],
  :controller "Api/2/User.user",
  :defaultOutputFormat "json",
  :description "Create a new user",
  :category ["Identity Management" "User API"]}
 {:path "userbatch",
  :validOutputFormats ["json"],
  :parameterDescriptions
  {:data
   "Array of user objects with required 'email' property (rest just like for POST /api/2/user) plus the optional but nice to have external user id under 'userId'"},
  :method "POST",
  :name "Batch user create",
  :httpMethods
  {:POST
   {:name "POST",
    :required ["data"],
    :optional [],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Batch was executed - please review the response.",
      :type "user"}
     {:status 400,
      :description "Something's wrong with provided data.",
      :type "user"}
     {:status 406,
      :description "Too much data in the batch.",
      :type "api-exception"}]}},
  :url "/api/2/userbatch",
  :pathParameters [],
  :controller "Api/2/User.userbatch",
  :defaultOutputFormat "json",
  :description "Push new users in batch and get UUID in the response",
  :category ["Identity Management" "User API"]}
 {:path "signup",
  :validOutputFormats ["json"],
  :parameterDescriptions
  {:gender
   "New gender. Legal values and a localized description can be fetched from [/api/2/describe/User?property=gender](/endpoints/GET/describe/{object}/).",
   :acceptTerms
   "Create the user with terms & conditions and privacy policy pre-accepted",
   :name "JSON object containing familyName, givenName and formatted",
   :displayName "New preferred display name",
   :email "Email of the user. Must be unique across all of SPiD",
   :addresses
   "A JSON string. A map of addresses, with the address type as keys and the address objects/maps as values. See [the address type](/types/address/) for appropriate types",
   :password "Desired password",
   :birthday "New date of birth, YYYY-MM-DD",
   :redirectUri "Where to redirect the user after completing signup"},
  :method "POST",
  :name "Signup",
  :httpMethods
  {:POST
   {:name "POST",
    :required ["email"],
    :optional
    ["password"
     "redirectUri"
     "displayName"
     "name"
     "birthday"
     "addresses"
     "gender"
     "acceptTerms"],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 201, :description "Returns the new user", :type "user"}
     {:status 302,
      :description "The email address already exists.",
      :type "api-exception"}
     {:status 400,
      :description "Required email parameter is missing.",
      :type "api-exception"}
     {:status 409,
      :description "Users could not be created.",
      :type "api-exception"}
     {:status 451,
      :description "Domain of email is blocked due to legal reasons.",
      :type "api-exception"}]}},
  :url "/api/2/signup",
  :pathParameters [],
  :controller "Api/2/User.user_signup",
  :defaultOutputFormat "json",
  :description "Create a new user (no update)",
  :category ["Identity Management" "Authentication API"]}
 {:path "signup_jwt",
  :validOutputFormats ["json"],
  :parameterDescriptions {:jwt ""},
  :method "POST",
  :name "Signup JWT",
  :httpMethods
  {:POST
   {:name "POST",
    :required ["jwt"],
    :optional [],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses [{:status 200, :description "", :type "object"}]}},
  :url "/api/2/signup_jwt",
  :pathParameters [],
  :controller "Api/2/User.user_signup_jwt",
  :defaultOutputFormat "json",
  :description "Create a new user (no update) from a JWT",
  :category ["Identity Management" "Authentication API"]}
 {:path "attach_jwt",
  :validOutputFormats ["json"],
  :parameterDescriptions {:jwt ""},
  :method "POST",
  :name "Attach JWT",
  :httpMethods
  {:POST
   {:name "POST",
    :required ["jwt"],
    :optional [],
    :accessTokenTypes ["user"],
    :filters [],
    :defaultFilters [],
    :responses [{:status 200, :description "", :type "object"}]}},
  :deprecated "2.84",
  :url "/api/2/user/attach_jwt",
  :pathParameters [],
  :controller "Api/2/User.user_attach_jwt",
  :defaultOutputFormat "json",
  :description "Attaches a thirdparty account from a JWT to a user",
  :category ["Identity Management" "Authentication API"]}
 {:path "user/{userId}/varnishId",
  :validOutputFormats ["json"],
  :parameterDescriptions
  {:userId
   "The user's `uuid` or `userId` (not to be mistaken with the deprecated `id`)."},
  :method "GET",
  :name "Get Varnish id",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional [],
    :accessTokenTypes ["server" "user"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns an object that contains the SP_ID.",
      :type "varnish-id"}]}},
  :deprecated "2.84",
  :url "/api/2/user/{id}/varnishId",
  :pathParameters ["userId"],
  :controller "Api/2/User.user_varnish",
  :defaultOutputFormat "json",
  :description "Get the varnish ID for a user",
  :category ["Identity Management" "User API"]}
 {:path "user/{userId}",
  :validOutputFormats ["json" "jsonp" "png"],
  :parameterDescriptions
  {:gender
   "New gender. Legal values and a localized description can be fetched from [/api/2/describe/User?property=gender](/endpoints/GET/describe/{object}/).",
   :userId
   "The user's `uuid` or `userId` (not to be mistaken with the deprecated `id`).",
   :name "JSON object containing familyName, givenName and formatted",
   :photo "URL to a profile photo",
   :displayName "New preferred display name",
   :utcOffset
   "New timezone, given as UTC offset (number of hours), e.g. \"+02:00\"",
   :url "New external URL related to the user",
   :preferredUsername "New preferred user name",
   :addresses
   "A JSON string. A map of addresses, with the address type as keys and the address objects/maps as values. See [the address type](/types/address/) for appropriate types",
   :birthday "New date of birth, YYYY-MM-DD",
   :redirectUri
   "The change may trigger a confirmation email to the user. After completing the change, they will be redirected to this URL if specified. If not specified, the user is redirected to the client default redirectUri."},
  :method "*",
  :name "Get and update users",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional [],
    :accessTokenTypes ["server" "user"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns the user object.",
      :type "user"}
     {:status 404,
      :description "Requested user was not found",
      :type "api-exception"}
     {:status 403,
      :description "Client is not authorized to access this user",
      :type "api-exception"}
     {:status 403,
      :description "Token is not authorized to access this user",
      :type "api-exception"}
     {:status 404,
      :description "User was not found",
      :type "api-exception"}
     {:status 403,
      :description
      "Client or merchant is not authorized to access this user",
      :type "api-exception"}]},
   :POST
   {:name "POST",
    :required [],
    :optional
    ["displayName"
     "name"
     "birthday"
     "addresses"
     "gender"
     "photo"
     "preferredUsername"
     "url"
     "utcOffset"],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns the updated user object.",
      :type "user"}
     {:status 404,
      :description "Requested user was not found",
      :type "api-exception"}
     {:status 403,
      :description "Client is not authorized to access this user",
      :type "api-exception"}
     {:status 403,
      :description "Token is not authorized to access this user",
      :type "api-exception"}
     {:status 404,
      :description "User was not found",
      :type "api-exception"}
     {:status 403,
      :description
      "Client or merchant is not authorized to access this user",
      :type "api-exception"}]}},
  :url "/api/2/user/{id}",
  :pathParameters ["userId"],
  :controller "Api/2/User.user",
  :defaultOutputFormat "json",
  :description "Get a user data object or post changes to one.",
  :category ["Identity Management" "User API"]}
 {:path "users",
  :validOutputFormats ["json" "jsonp" "png"],
  :parameterDescriptions
  {:gender "Exact match (male, female, undisclosed, other, withheld)",
   :givenName "Sub-string match from the beginning of the given name",
   :userId "Exact match.",
   :emails_regex "Regexp search all emails.",
   :familyName
   "Sub-string match from the beginning of the family name",
   :address_streetAddress "Regex search.",
   :address_formatted "Regex search.",
   :phoneNumber
   "Sub-string match from the beginning of the primary phone number",
   :displayName
   "Sub-string match from the beginning of the displayName",
   :emails
   "Exact match for either the primary or one of the secondary emails.",
   :address_postalCode "Exact match.",
   :email "Exact match for the primary email.",
   :fullName
   "Sub-string match from the beginning of the given name and family name combined",
   :fields
   "A [list of fields](/endpoints/#parameters) to select, makes for a slimmer response.",
   :address_region "Regex search.",
   :address_country "Exact match.",
   :preferredUsername
   "Sub-string match from the beginning of the preferred user name",
   :address_locality "Regex search.",
   :id "Exact match.",
   :phoneNumbers
   "Sub-string match from the beginning of any phone number",
   :birthday "Regex search."},
  :method "GET",
  :name "List users",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional
    ["limit"
     "since"
     "offset"
     "until"
     "fields"
     "sort"
     "filters"
     "id"
     "userId"
     "email"
     "emails"
     "emails_regex"
     "displayName"
     "givenName"
     "familyName"
     "fullName"
     "preferredUsername"
     "phoneNumber"
     "phoneNumbers"
     "gender"
     "birthday"
     "address_formatted"
     "address_postalCode"
     "address_country"
     "address_region"
     "address_locality"
     "address_streetAddress"],
    :accessTokenTypes ["server"],
    :filters
    ["updated"
     "verified"
     "unverified"
     "inactive blocked"
     "deleted"
     "facebook"
     "google"
     "live"
     "imported"
     "merchant"],
    :defaultFilters ["verified" "unverified"],
    :responses
    [{:status 200,
      :description "Returns all users matched by the query.",
      :type "[user]"}
     {:status 404,
      :description "No users found",
      :type "api-exception"}
     {:status 400,
      :description "Invalid parameter value",
      :type "api-exception"}]}},
  :url "/api/2/users",
  :pathParameters [],
  :controller "Api/2/User.users",
  :defaultOutputFormat "json",
  :description "List users",
  :category ["Identity Management" "User API"]}
 {:path "search/users",
  :validOutputFormats ["json"],
  :parameterDescriptions
  {:status "",
   :gender "",
   :homeAddress "",
   :givenName "",
   :clientId "",
   :userId "",
   :deliveryAddress "",
   :familyName "",
   :phoneNumber "",
   :displayName "",
   :emails "",
   :email "",
   :invoiceAddress "",
   :fullName "",
   :preferredUsername "",
   :address "",
   :query "",
   :id "",
   :birthyear "",
   :phoneNumbers ""},
  :method "GET",
  :name "Search users",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional
    ["filters"
     "clientId"
     "query"
     "id"
     "userId"
     "email"
     "displayName"
     "givenName"
     "familyName"
     "fullName"
     "preferredUsername"
     "gender"
     "birthyear"
     "emails"
     "phoneNumber"
     "phoneNumbers"
     "address"
     "homeAddress"
     "invoiceAddress"
     "deliveryAddress"
     "status"],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns a list of users",
      :type "[user]"}
     {:status 400,
      :description "No valid search parameters provided",
      :type "api-exception"}
     {:status 403,
      :description "Wrong clientId",
      :type "api-exception"}]}},
  :url "/api/2/search/users",
  :pathParameters [],
  :controller "Api/2/Search.search_users",
  :defaultOutputFormat "json",
  :description
  "Search for users by individual attributes and/or full-text",
  :category ["Identity Management" "User API"]}
 {:path "search/users/{query}",
  :validOutputFormats ["json"],
  :parameterDescriptions
  {:filters "", :clientId "", :query "Full-text search query"},
  :method "GET",
  :name "User full-text search",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional ["filters" "clientId"],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns a list of users",
      :type "[user]"}]}},
  :url "/api/2/search/users/{query}",
  :pathParameters ["query"],
  :controller "Api/2/Search.search_users",
  :defaultOutputFormat "json",
  :description
  "Full-text search for users. Use /search/users instead.",
  :category ["Identity Management" "User API"]}
 {:path "user/{userId}/logins",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions
  {:userId
   "The user's `uuid` or `userId` (not to be mistaken with the deprecated `id`)",
   :ip "Filter by login attempts from this IP address",
   :status "Filter by successful (`true`) or failed (`false`) logins"},
  :method "GET",
  :name "List logins",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional ["limit" "since" "offset" "until" "ip" "status"],
    :accessTokenTypes ["server" "user"],
    :filters ["merchant"],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "A list of login attempt objects",
      :type "[login-attempt]"}]}},
  :url "/api/2/user/{id}/logins",
  :pathParameters ["userId"],
  :controller "Api/2/User.user_logins",
  :defaultOutputFormat "json",
  :description "List all (or search for) logins for a user",
  :category ["Identity Management" "Login API"]}
 {:path "user/{userId}/trigger/{trigger}",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions
  {:userId
   "The user's `uuid` or `userId` (not to be mistaken with the deprecated `id`).",
   :trigger
   "What kind of email trigger to send. Currently only two options:\n\n* `emailverification` - Sends an email to the user, asking them to verify their email address.\n* `newpassword` - Sends an email to the user with a link to create a new password. The password reset link is valid for 24 hours.",
   :redirectUri
   "Where to redirect the user after completing triggered action."},
  :method "GET",
  :name "Trigger",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional ["redirectUri"],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 201,
      :description
      "Returns an indication of whether or not the trigger was sent successfully.",
      :type "success-indicator"}]}},
  :url "/api/2/user/{id}/trigger/{trigger}",
  :pathParameters ["userId" "trigger"],
  :controller "Api/2/User.user_trigger",
  :defaultOutputFormat "json",
  :description
  "Trigger a `newpassword` or `emailverification` for user",
  :category ["Identity Management" "User API"]}
 {:path "mail",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions
  {:id
   "The user's `uuid` or `userId` (not to be mistaken with the deprecated `id`)",
   :email "Email of the user. Must be unique across all of SPiD"},
  :method "GET",
  :name "List mail history",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional ["id" "email"],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns a list of mail objects",
      :type "[mail]"}
     {:status 400,
      :description "No valid parameter provided",
      :type "api-exception"}
     {:status 400,
      :description
      "Email parameter did not properly base64 decode into a valid email",
      :type "api-exception"}]}},
  :url "/api/2/mail",
  :pathParameters [],
  :controller "Api/2/Mail.mail",
  :defaultOutputFormat "json",
  :description "List mail history and events for user",
  :category ["Identity Management" "User API"]}
 {:path "user/{userId}/subscription",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions
  {:userId
   "Create subscription for the user with this `uuid` or `userId` (not to be mistaken with the deprecated `id`).",
   :productId "The product to subscribe the user to",
   :startDate "The date from when the subscription is valid",
   :orderId "OrderId of the order used to create the subscription.",
   :expires
   "The date/time (`YYYY-MM-DD HH:MM:SS`), or the number of seconds from now when the subscription expires"},
  :method "POST",
  :name "Create user subscription",
  :httpMethods
  {:POST
   {:name "POST",
    :required ["productId"],
    :optional ["startDate" "orderId" "expires"],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns the newly created subscription object",
      :type "subscription"}]}},
  :url "/api/2/user/{id}/subscription",
  :pathParameters ["userId"],
  :controller "Api/2/User.user_subscription",
  :defaultOutputFormat "json",
  :description "Create a new user subscription for a user",
  :category ["Payment Services" "Subscription API"]}
 {:path "user/{userId}/subscription/{subscriptionId}/stop",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions
  {:userId
   "The user's `uuid` or `userId` (not to be mistaken with the deprecated `id`).",
   :subscriptionId "",
   :stopAfterLock
   "\"1\", to set the subscription to stop renewal after the lock period is over, \"0\" means do not stop renewal after lock period"},
  :method "*",
  :name "Expire user subscription after lock",
  :httpMethods
  {:POST
   {:name "POST",
    :required ["stopAfterLock"],
    :optional [],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns the updated subscription object",
      :type "subscription"}]}},
  :url "/api/2/user/{id}/subscription/{<\\d+>subscription_id}/stop",
  :pathParameters ["userId" "subscriptionId"],
  :controller "Api/2/User.user_subscription_stop_renewal_after_lock",
  :defaultOutputFormat "json",
  :description "Expire user subscription after lock period is over",
  :category ["Payment Services" "Subscription API"]}
 {:path "user/{userId}/subscription/{subscriptionId}",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions
  {:userId
   "The user's `uuid` or `userId` (not to be mistaken with the deprecated `id`).",
   :subscriptionId "",
   :autoRenew "\"1\", to enable auto-renewal, \"0\" to disable"},
  :method "*",
  :name "Manage user subscription",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional [],
    :accessTokenTypes ["server" "user"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns the subscription object",
      :type "subscription"}
     {:status 404,
      :description "No such subscription",
      :type "api-exception"}]},
   :POST
   {:name "POST",
    :required ["autoRenew"],
    :optional [],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns the updated subscription object",
      :type "subscription"}]},
   :DELETE
   {:name "DELETE",
    :required [],
    :optional [],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns the expired subscription object",
      :type "subscription"}]}},
  :url "/api/2/user/{id}/subscription/{<\\d+>subscription_id}",
  :pathParameters ["userId" "subscriptionId"],
  :controller "Api/2/User.user_subscription",
  :defaultOutputFormat "json",
  :description "Get, Update or (soft)delete a User subscription.",
  :category ["Payment Services" "Subscription API"]}
 {:path "user/{userId}/subscriptions",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions
  {:userId
   "The user's `uuid` or `userId` (not to be mistaken with the deprecated `id`)."},
  :method "GET",
  :name "List subscriptions",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional ["filters"],
    :accessTokenTypes ["server" "user"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Retrieves all subscriptions for user.",
      :type "{subscriptionId subscription}"}]}},
  :url "/api/2/user/{id}/subscriptions",
  :pathParameters ["userId"],
  :controller "Api/2/User.user_subscriptions",
  :defaultOutputFormat "json",
  :description "List all subscriptions (on client) for user",
  :category ["Payment Services" "Subscription API"]}
 {:path "user/{userId}/product/{productId}",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions
  {:userId
   "The user's `uuid` or `userId` (not to be mistaken with the deprecated `id`).",
   :productId
   "ID of a product or subscription. Since version 2.9, this may also be a product alias, in which case you should also use the `merchant` filter."},
  :method "*",
  :name "Manage digital content access",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional ["filters"],
    :accessTokenTypes ["server" "user"],
    :filters ["merchant"],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description
      "Returns a description of the user's access. Crucially, the `result` property will be `true` if the user has access.",
      :type "user-product-access"}
     {:status 404,
      :description "No access to that product.",
      :type "api-exception"}]},
   :POST
   {:name "POST",
    :required [],
    :optional [],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Grant a user access to a product",
      :type "user-product-access"}]},
   :DELETE
   {:name "DELETE",
    :required [],
    :optional [],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Revoke a user's access to a product",
      :type "success-indicator"}]}},
  :url "/api/2/user/{id}/product/{product_id}",
  :pathParameters ["userId" "productId"],
  :controller "Api/2/User.user_product",
  :defaultOutputFormat "json",
  :description "Manage user access to a product.",
  :category ["Payment Services" "Digital Contents API"]}
 {:path "user/{userId}/products",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions
  {:userId
   "The user's `uuid` or `userId` (not to be mistaken with the deprecated `id`)."},
  :method "*",
  :name "List contents",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional ["filters"],
    :accessTokenTypes ["server" "user"],
    :filters ["all" "none" "active" "expired"],
    :defaultFilters ["active"],
    :responses
    [{:status 200,
      :description "",
      :type "{productId digital-content}"}]}},
  :url "/api/2/user/{id}/products",
  :pathParameters ["userId"],
  :controller "Api/2/User.user_products",
  :defaultOutputFormat "json",
  :description
  "List all contents (on client) that user has access to.",
  :category ["Payment Services" "Digital Contents API"]}
 {:path "user/{userId}/connected",
  :validOutputFormats ["json"],
  :parameterDescriptions
  {:userId
   "The user's `uuid` or `userId` (not to be mistaken with the deprecated `id`)."},
  :method "*",
  :name "Has Access to User",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional [],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description
      "Returns object with field \"connected\" set to true/false whether client is connected to given user.",
      :type "object"}]}},
  :url "/api/2/user/{id}/connected",
  :pathParameters ["userId"],
  :controller "Api/2/User.user_connected",
  :defaultOutputFormat "json",
  :description "Check if client behind token is connected to user",
  :category ["Identity Management" "User connections API"]}
 {:path "user/{userId}/agreements",
  :validOutputFormats ["json"],
  :parameterDescriptions
  {:userId
   "The user's `uuid` or `userId` (not to be mistaken with the deprecated `id`)."},
  :method "*",
  :name "Has Access to User",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional [],
    :accessTokenTypes ["server" "user"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description
      "Returns agreements object, containing boolean values whether latest agreements are accepted",
      :type "agreements"}]}},
  :url "/api/2/user/{id}/agreements",
  :pathParameters ["userId"],
  :controller "Api/2/User.user_agreements",
  :defaultOutputFormat "json",
  :description
  "Check if client behind token has access to user a and if the user has accepted relevant agreements",
  :category ["Identity Management" "User agreements API"]}
 {:path "user/{userId}/required_fields",
  :validOutputFormats ["json"],
  :parameterDescriptions
  {:userId
   "The user's `uuid` or `userId` (not to be mistaken with the deprecated `id`)."},
  :method "*",
  :name "Has Access to User",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional [],
    :accessTokenTypes ["server" "user"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description
      "Returns required fields object, containing array with unfilled required fields",
      :type "required_fields"}]}},
  :url "/api/2/user/{id}/required_fields",
  :pathParameters ["userId"],
  :controller "Api/2/User.user_required_fields",
  :defaultOutputFormat "json",
  :description
  "Check if client behind token has access to user, and returns user unfilled required fields",
  :category ["Identity Management" "User API"]}
 {:path "user/{userId}/agreements/accept",
  :validOutputFormats ["json"],
  :parameterDescriptions
  {:userId
   "The user's `uuid` or `userId` (not to be mistaken with the deprecated `id`)."},
  :method "POST",
  :name "User agreements acceptation process",
  :httpMethods
  {:POST
   {:name "POST",
    :required [],
    :optional [],
    :accessTokenTypes ["server" "user"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description
      "Returns status of default and client agreements acceptance process.",
      :type "agreements_accept"}]}},
  :url "/api/2/user/{id}/agreements/accept",
  :pathParameters ["userId"],
  :controller "Api/2/User.user_agreements_accept",
  :defaultOutputFormat "json",
  :description
  "Check if client behind token has access to user and accepts agreements if it has not been done yet",
  :category ["Identity Management" "User agreements API"]}
 {:path "anonymous/users",
  :validOutputFormats ["json"],
  :parameterDescriptions {},
  :method "GET",
  :name "Anonymous:users",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional ["since" "until" "offset"],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns a list of anonymized user data",
      :type "[user-segmentation]"}
     {:status 400,
      :description "Required client ID missing",
      :type "api-exception"}]}},
  :deprecated "2.84",
  :url "/api/2/anonymous/users",
  :pathParameters [],
  :controller "Api/2/anonymous.anonymous_users",
  :defaultOutputFormat "json",
  :description
  "Get all anonymous user objects changed in the given period",
  :category ["Identity Management" "User API"]}
 {:path "merchant/{merchant_id}",
  :validOutputFormats ["json"],
  :parameterDescriptions {},
  :method "GET",
  :name "Get merchant",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional [],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200, :description "Merchant object", :type "merchant"}
     {:status 404,
      :description "No merchant found",
      :type "api-exception"}]}},
  :url "/api/2/merchant/{id}",
  :pathParameters ["merchant_id"],
  :controller "Api/2/Merchant.merchant",
  :defaultOutputFormat "json",
  :description "Get information about merchant",
  :category ["Utilities" "Platform API"]}
 {:path "clients",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions {},
  :method "GET",
  :name "List clients",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional [],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200, :description "", :type "{clientId client}"}]}},
  :url "/api/2/clients",
  :pathParameters [],
  :controller "Api/2/Client.clients",
  :defaultOutputFormat "json",
  :description "List all clients",
  :category ["Utilities" "Platform API"]}
 {:path "client/{client_id}",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions {},
  :method "GET",
  :name "Get client",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional [],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200, :description "", :type "client"}
     {:status 404,
      :description "No client found",
      :type "api-exception"}]}},
  :url "/api/2/client/{id}",
  :pathParameters ["client_id"],
  :controller "Api/2/Client.client",
  :defaultOutputFormat "json",
  :description "Get information about single client",
  :category ["Utilities" "Platform API"]}
 {:path "client/{client_id}/acl",
  :validOutputFormats ["json"],
  :parameterDescriptions {:client_id "Client ID"},
  :method "GET",
  :name "Get client acl ",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional [],
    :accessTokenTypes ["server" "user"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200, :description "", :type "client"}
     {:status 403,
      :description "Token does not have access to this client",
      :type "api-exception"}
     {:status 404,
      :description "No client found",
      :type "api-exception"}]}},
  :url "/api/2/client/{id}/acl",
  :pathParameters ["client_id"],
  :controller "Api/2/Client.client_acl",
  :defaultOutputFormat "json",
  :description "Get client acl",
  :category ["Utilities" "Platform API"]}
 {:path "client/{client_id}/teasers",
  :validOutputFormats ["json"],
  :parameterDescriptions {:client_id "Client ID"},
  :method "*",
  :name "Client teaser list",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional [],
    :accessTokenTypes ["server" "user"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns a list of client teasers",
      :type "[teaser]"}
     {:status 403,
      :description "Token does not have access to this client",
      :type "api-exception"}
     {:status 404,
      :description "Client not found",
      :type "api-exception"}]},
   :POST
   {:name "POST",
    :required ["markdown"],
    :optional ["description" "css" "active" "slug"],
    :accessTokenTypes ["server" "user"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 201,
      :description "Returns the newly created teaser object",
      :type "teaser"}
     {:status 202,
      :description "Teaser was created but not uploaded to CDN",
      :type "teaser"}
     {:status 400,
      :description "Missing required parameters or similar error",
      :type "api-exception"}
     {:status 403,
      :description "Token does not have access to this client",
      :type "api-exception"}]}},
  :url "/api/2/client/{id}/teasers",
  :pathParameters ["client_id"],
  :controller "Api/2/Client.client_teasers",
  :defaultOutputFormat "json",
  :description "Get client teasers or create new one",
  :category ["Self Service" "Self Service API"]}
 {:path "client/{client_id}/teasers/{teaser_id}",
  :validOutputFormats ["json"],
  :parameterDescriptions
  {:client_id "Client ID", :teaser_id "Client Teaser ID"},
  :method "*",
  :name "Client teaser get or update",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional [],
    :accessTokenTypes ["server" "user"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns a teaser object",
      :type "teaser"}
     {:status 403,
      :description "Token does not have access to this client",
      :type "api-exception"}
     {:status 404,
      :description "Client not found",
      :type "api-exception"}]},
   :POST
   {:name "POST",
    :required [],
    :optional ["description" "markdown" "css" "active" "slug"],
    :accessTokenTypes ["server" "user"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns the updated teaser object",
      :type "teaser"}
     {:status 400,
      :description "Missing required parameters, or teaser not found",
      :type "api-exception"}
     {:status 403,
      :description "Token does not have access to this teaser",
      :type "api-exception"}
     {:status 404,
      :description "Client not found",
      :type "api-exception"}]},
   :DELETE
   {:name "DELETE",
    :required [],
    :optional [],
    :accessTokenTypes ["server" "user"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns the deleted teaser object",
      :type "teaser"}
     {:status 400,
      :description "Teaser not found or unable to delete",
      :type "api-exception"}
     {:status 403,
      :description "Token does not have access to this client",
      :type "api-exception"}
     {:status 404,
      :description "Client not found",
      :type "api-exception"}]}},
  :url "/api/2/client/{id}/teasers/{teaser_id}",
  :pathParameters ["client_id" "teaser_id"],
  :controller "Api/2/Client.client_teaser",
  :defaultOutputFormat "json",
  :description "Get or update one client teaser",
  :category ["Self Service" "Self Service API"]}
 {:path "products",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions
  {:productId "Only list this particular product",
   :name "Search for exact matches of this name",
   :code "Search for exact matches of this code",
   :price "Search for exact matches of this price",
   :parentProductId "List all products with this parent product"},
  :method "GET",
  :name "Search products",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional
    ["filters"
     "productId"
     "name"
     "code"
     "price"
     "parentProductId"
     "limit"
     "offset"
     "since"
     "until"
     "sort"],
    :accessTokenTypes ["server" "user"],
    :filters
    ["content"
     "subscriptions"
     "deleted"
     "unavailable"
     "invisible"
     "unselectable"
     "available"
     "bundle"],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns a list of products.",
      :type "[product]"}
     {:status 404,
      :description "No products found",
      :type "api-exception"}]}},
  :url "/api/2/products",
  :pathParameters [],
  :controller "Api/2/Product.products",
  :defaultOutputFormat "json",
  :description "Search for products (for client)",
  :category ["Payment Services" "Product API"]}
 {:path "product",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions
  {:subscriptionSurveyUrl
   "URL to a survey for when people terminate a subscription for this product.",
   :status "The [product status](/types/product-status/)",
   :subscriptionAutoRenewLockPeriod
   "The duration of the initial period where auto renewal cannot be changed",
   :vat "VAT, fraction × 10000. For instance, 25% would be 2500",
   :currency "The price and VAT currency",
   :subscriptionFinalEndDate
   "A date from when this product is no longer for sale",
   :name "The product name. Cannot be longer than 64 characters.",
   :parentProductId "ID of the parent product, if any",
   :saleStart "Provide if there is a sale of some sort",
   :subscriptionPeriod
   "The duration of a subscription period, as a timestamp in seconds",
   :availableStop
   "The time when the product is no longer available for sale ([date time](/types/datetime/))",
   :subscriptionAutoRenew
   "\"1\" if the subscription should automatically renew, \"0\" otherwise",
   :code
   "Client-defined product code. More easily recognizable than the numeric ID. Must be between 3 and 20 characters long.",
   :saleStop "Provide if there is a sale of some sort",
   :bundle
   "If the product is of type bundle, this field decides what bundle type. Bundle type 0: Not a bundle, 1: Dynamic bundle, 2: One-off bundle",
   :url
   "Link to the product. Must be between 3 and 1024 characters long.",
   :subscriptionEmailReceiptLimit
   "If set to anything not null, will prevent emails from being sent on purchase/renewal of this subscription",
   :subscriptionRenewPeriod "The duration of a renewal",
   :type "The [product type](/types/product-type/)",
   :subscriptionAutoRenewDisabled
   "\"1\" if automatic renewals should not be available, \"0\" if they should",
   :subscriptionRenewPrice "Price of subscription renewals, in cents",
   :hideItems
   "If the product is a bundle, this field decides if the bundle items should be hidden (`\"1\"`) in communications.",
   :paymentOptions
   "A [payment options bitmask](/types/payment-options/)",
   :price "Price, in cents",
   :allowMultiSales
   "\"1\" if a user is allowed to purchase this product multiple times, \"0\" otherwise",
   :description
   "Product description. Must be between 3 and 255 characters long.",
   :quantityLimit "If there is a limited supply for this product",
   :availableStart
   "The time from when the product is available for sale ([date time](/types/datetime/))"},
  :method "POST",
  :name "Create product",
  :httpMethods
  {:POST
   {:name "POST",
    :required
    ["code" "name" "price" "vat" "paymentOptions" "type" "currency"],
    :optional
    ["bundle"
     "hideItems"
     "status"
     "parentProductId"
     "description"
     "url"
     "quantityLimit"
     "saleStart"
     "saleStop"
     "availableStart"
     "availableStop"
     "allowMultiSales"
     "subscriptionPeriod"
     "subscriptionRenewPrice"
     "subscriptionRenewPeriod"
     "subscriptionAutoRenew"
     "subscriptionAutoRenewLockPeriod"
     "subscriptionAutoRenewDisabled"
     "subscriptionEmailReceiptLimit"
     "subscriptionFinalEndDate"
     "subscriptionSurveyUrl"],
    :accessTokenTypes ["server"],
    :filters ["merchant"],
    :defaultFilters [],
    :responses
    [{:status 201,
      :description "Returns the newly created product",
      :type "product"}
     {:status 400,
      :description "Missing one or more required parameters",
      :type "api-exception"}
     {:status 400,
      :description "Failed to create or update product",
      :type "api-exception"}]}},
  :url "/api/2/product",
  :pathParameters [],
  :controller "Api/2/Product.product",
  :defaultOutputFormat "json",
  :description "Create a new product template",
  :category ["Payment Services" "Product API"]}
 {:path "product/{id}",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions
  {:subscriptionSurveyUrl "",
   :status "",
   :subscriptionAutoRenewLockPeriod "",
   :vat "",
   :subscriptionFinalEndDate "",
   :name "",
   :saleStart "",
   :subscriptionGracePeriod "",
   :subscriptionPeriod "",
   :availableStop "",
   :subscriptionAutoRenew "",
   :saleStop "",
   :url "",
   :subscriptionEmailReceiptLimit "",
   :subscriptionRenewPeriod "",
   :subscriptionAutoRenewDisabled "",
   :subscriptionRenewPrice "",
   :hideItems "",
   :paymentOptions "",
   :price "",
   :id "",
   :allowMultiSales "",
   :description "",
   :quantityLimit "",
   :availableStart ""},
  :method "*",
  :name "Get/update product",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional [],
    :accessTokenTypes ["server" "user"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns the full product description",
      :type "product"}
     {:status 400,
      :description "Missing required parameter productId",
      :type "api-exception"}
     {:status 404,
      :description "Product not found",
      :type "api-exception"}]},
   :POST
   {:name "POST",
    :required [],
    :optional
    ["name"
     "description"
     "price"
     "vat"
     "paymentOptions"
     "url"
     "quantityLimit"
     "status"
     "availableStart"
     "availableStop"
     "saleStart"
     "saleStop"
     "hideItems"
     "allowMultiSales"
     "subscriptionPeriod"
     "subscriptionRenewPrice"
     "subscriptionRenewPeriod"
     "subscriptionAutoRenew"
     "subscriptionAutoRenewLockPeriod"
     "subscriptionAutoRenewDisabled"
     "subscriptionGracePeriod"
     "subscriptionEmailReceiptLimit"
     "subscriptionFinalEndDate"
     "subscriptionSurveyUrl"],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns the updated product object.",
      :type "product"}]}},
  :url "/api/2/product/{id}",
  :pathParameters ["id"],
  :controller "Api/2/Product.product",
  :defaultOutputFormat "json",
  :description "Get a single product template",
  :category ["Payment Services" "Product API"]}
 {:path "products/parents",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions {},
  :method "GET",
  :name "Product parents",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional [],
    :accessTokenTypes ["server" "user"],
    :filters
    ["content"
     "subscriptions"
     "deleted"
     "unavailable"
     "invisible"
     "unselectable"
     "available"
     "bundle"],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns a list of products",
      :type "[product]"}
     {:status 404,
      :description "No parent products found",
      :type "api-exception"}]}},
  :url "/api/2/products/parents",
  :pathParameters [],
  :controller "Api/2/Product.products_parents",
  :defaultOutputFormat "json",
  :description "Get all \"parent\" products for the client",
  :category ["Payment Services" "Product API"]}
 {:path "bundle/{bundleId}/product/{productId}",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions
  {:bundleId "ID of the bundle", :productId "ID of the product"},
  :method "POST",
  :name "Update product bundle item",
  :httpMethods
  {:POST
   {:name "POST",
    :required [],
    :optional ["sort" "price" "vat"],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns the newly inserted bundle item",
      :type "bundle-item"}
     {:status 400,
      :description
      "Bundle id supplied does not exist or is not a bundle",
      :type "api-exception"}
     {:status 400,
      :description "Product id supplied does not exist.",
      :type "api-exception"}
     {:status 400,
      :description
      "Error when creating bundle item. Detailed error message enclosed.",
      :type "api-exception"}]}},
  :url "/api/2/bundle/{id}/product/{product}",
  :pathParameters ["bundleId" "productId"],
  :controller "Api/2/Bundle.bundle_item",
  :defaultOutputFormat "json",
  :description "Add or Update a Bundle Item",
  :category ["Payment Services" "Bundle API"]}
 {:path "bundle/{bundleId}/product/{productId}",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions
  {:bundleId "ID of the bundle to remove the product from",
   :productId "ID of the product to remove from the bundle"},
  :method "DELETE",
  :name "Remove product bundle item",
  :httpMethods
  {:DELETE
   {:name "DELETE",
    :required [],
    :optional [],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description
      "Returns an indication of whether the deletion was successful",
      :type "success-indicator"}
     {:status 400,
      :description
      "Bundle id supplied does not exist or is not a bundle",
      :type "api-exception"}
     {:status 400,
      :description "Product id supplied does not exist.",
      :type "api-exception"}
     {:status 400,
      :description
      "Product supplied is not a part of the supplied bundle",
      :type "api-exception"}]}},
  :url "/api/2/bundle/{id}/product/{product}",
  :pathParameters ["bundleId" "productId"],
  :controller "Api/2/Bundle.bundle_item",
  :defaultOutputFormat "json",
  :description "Remove a Bundle Item from a Bundle",
  :category ["Payment Services" "Bundle API"]}
 {:path "injectable/names",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions {},
  :method "GET",
  :name "List token names",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional [],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses [{:status 200, :description "", :type "[string]"}]}},
  :url "/api/2/injectable/names",
  :pathParameters [],
  :controller "Api/2/Injectable.token_names",
  :defaultOutputFormat "json",
  :description "List out token names for client",
  :category ["Payment Services" "InjectToken API"]}
 {:path "injectable/import",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions {:tokenName "", :content ""},
  :method "POST",
  :name "Import tokens",
  :httpMethods
  {:POST
   {:name "POST",
    :required ["tokenName" "content"],
    :optional [],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses [{:status 200, :description "", :type "object"}]}},
  :url "/api/2/injectable/import",
  :pathParameters [],
  :controller "Api/2/Injectable.token_import",
  :defaultOutputFormat "json",
  :description
  "Content should be a valid json array. ie [123,\"string\",\"1as\"]",
  :category ["Payment Services" "InjectToken API"]}
 {:path "voucher/{voucherCode}",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions
  {:voucherCode "Unique code of the voucher to retrieve"},
  :method "GET",
  :name "Get voucher",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional [],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200, :description "Returns the voucher", :type "voucher"}
     {:status 403,
      :description "Client does not have access to this voucher group",
      :type "api-exception"}
     {:status 404,
      :description "Voucher not found",
      :type "api-exception"}]}},
  :url "/api/2/voucher/{code}",
  :pathParameters ["voucherCode"],
  :controller "Api/2/Voucher.voucher",
  :defaultOutputFormat "json",
  :description
  "Returns a voucher code data array, by VOUCHER CODE, not ID",
  :category ["Payment Services" "Voucher API"]}
 {:path "vouchers/generate/{voucherGroupId}",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions
  {:voucherGroupId "ID of the voucher group to generate vouchers for",
   :amount "The number of unique vouchers to generate"},
  :method "POST",
  :name "Generate voucher",
  :httpMethods
  {:POST
   {:name "POST",
    :required [],
    :optional ["amount"],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description
      "Returns a simple object indicating success of failure",
      :type "success-indicator"}
     {:status 403,
      :description "Client does not have access to this voucher group",
      :type "api-exception"}
     {:status 404,
      :description "Voucher group not found",
      :type "api-exception"}
     {:status 404,
      :description
      "Failed to generate vouchers, see error object for further details",
      :type "api-exception"}]}},
  :url "/api/2/vouchers/generate/{id}",
  :pathParameters ["voucherGroupId"],
  :controller "Api/2/Voucher.generate_vouchers",
  :defaultOutputFormat "json",
  :description "",
  :category ["Payment Services" "Voucher API"]}
 {:path "vouchers/handout/{voucherGroupId}",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions
  {:voucherGroupId "ID of the voucher group to hand out vouchers for",
   :amount "The number of vouchers to retrieve. Defaults to 1."},
  :method "POST",
  :name "Handout vouchers",
  :httpMethods
  {:POST
   {:name "POST",
    :required [],
    :optional ["amount"],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns a list of vouchers",
      :type "[voucher]"}
     {:status 403,
      :description "Client does not have access to this voucher group",
      :type "api-exception"}
     {:status 404,
      :description "Voucher group not found",
      :type "api-exception"}
     {:status 404,
      :description
      "The requested amount exceeds the available amount. See error object for actual numbers.",
      :type "api-exception"}
     {:status 404,
      :description "Handout failed",
      :type "api-exception"}]}},
  :url "/api/2/vouchers/handout/{id}",
  :pathParameters ["voucherGroupId"],
  :controller "Api/2/Voucher.handout_vouchers",
  :defaultOutputFormat "json",
  :description
  "Return an amount of vouchers (that will change status to handout and no longer be available).",
  :category ["Payment Services" "Voucher API"]}
 {:path "voucher_handout",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions
  {:userId "ID of the user to give the voucher to",
   :voucherGroupId
   "The voucher group from which to hand out a voucher"},
  :method "POST",
  :name "Handout voucher to user",
  :httpMethods
  {:POST
   {:name "POST",
    :required ["userId" "voucherGroupId"],
    :optional [],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns an indication of success or failure",
      :type "success-indicator"}
     {:status 403,
      :description "Client does not have access to this voucher group",
      :type "api-exception"}
     {:status 404,
      :description
      "Missing required userId and/or voucherGroupId parameters",
      :type "api-exception"}
     {:status 404,
      :description "User not found",
      :type "api-exception"}
     {:status 404,
      :description "Voucher group not found, or handouts not enabled",
      :type "api-exception"}]}},
  :url "/api/2/voucher_handout",
  :pathParameters [],
  :controller "Api/2/Voucher.handout_voucher_to_user",
  :defaultOutputFormat "json",
  :description
  "Change status of a voucher to \"handed out\" and set the \"user_id\" on it, making it available only to this user.",
  :category ["Payment Services" "Voucher API"]}
 {:path "vouchers/groups",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions
  {:campaignId "Find voucher-groups applicable to this campaign",
   :title "Find the voucher group with this title (exact match)",
   :type "Find voucher-groups of this [type](/types/voucher-type/)",
   :productId
   "Find voucher groups applicable to this product (i.e. giveaways for this product)"},
  :method "GET",
  :name "List voucher groups",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional
    ["limit" "offset" "title" "campaignId" "type" "productId"],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns a list of voucher groups",
      :type "[voucher-group]"}]}},
  :url "/api/2/vouchers/groups",
  :pathParameters [],
  :controller "Api/2/Voucher.voucher_groups",
  :defaultOutputFormat "json",
  :description
  "Search for VoucherGroups. Title is exact match. `productId` for type `3`.",
  :category ["Payment Services" "Voucher API"]}
 {:path "vouchers/group/{voucherGroupId}",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions
  {:voucherGroupId "ID of the voucher group",
   :title "New title",
   :description "New description",
   :limit "New limit"},
  :method "*",
  :name "Get and update voucher group",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional [],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns the voucher group",
      :type "voucher-group"}
     {:status 403,
      :description "Client does not have access to this voucher group",
      :type "api-exception"}
     {:status 404,
      :description "Voucher group not found",
      :type "api-exception"}]},
   :POST
   {:name "POST",
    :required [],
    :optional ["title" "description" "limit"],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns the updated voucher group",
      :type "voucher-group"}
     {:status 403,
      :description "Client does not have access to this voucher group",
      :type "api-exception"}
     {:status 404,
      :description "Voucher group not found",
      :type "api-exception"}
     {:status 404,
      :description "Voucher group could not be updated",
      :type "api-exception"}
     {:status 404,
      :description "Voucher group could not be created",
      :type "api-exception"}]}},
  :url "/api/2/vouchers/group/{id}",
  :pathParameters ["voucherGroupId"],
  :controller "Api/2/Voucher.voucher_group",
  :defaultOutputFormat "json",
  :description
  "Get a voucher group and update it. Will return voucher on non-unique.",
  :category ["Payment Services" "Voucher API"]}
 {:path "vouchers/group",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions
  {:title "The voucher group's title",
   :type "[Voucher type](/types/voucher-type/)",
   :campaignId "ID of the campaign vouchers will be used with",
   :productId
   "If creating a giveaway voucher group, this is the ID of the product vouchers will grant access to",
   :description "A textual description of the vouchers",
   :unique
   "If 1, each user receives a unique voucher code that can only redeemed once. If 0, a shared voucher will be issued, and the `limit` can be used to control the number of times it can be redeemed.",
   :limit
   "The maximum number of times the voucher can be redeemed, if it is a shared voucher",
   :voucherCode "A unique string"},
  :method "POST",
  :name "Create voucher group",
  :httpMethods
  {:POST
   {:name "POST",
    :required ["title" "type"],
    :optional
    ["campaignId"
     "productId"
     "description"
     "unique"
     "limit"
     "voucherCode"],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns the newly created voucher group object",
      :type "voucher-group"}]}},
  :url "/api/2/vouchers/group",
  :pathParameters [],
  :controller "Api/2/Voucher.voucher_group",
  :defaultOutputFormat "json",
  :description "Create new voucher groups.",
  :category ["Payment Services" "Voucher API"]}
 {:path "campaign/{campaignId}",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions
  {:additionalReceiptInfo "New text to include in purchase receipts",
   :requireVoucher
   "1 or 0. If 1, access to the campaign requires users to have a valid and available voucher",
   :startDate "New date/time when the campaign becomes available",
   :products "New list of products in this campaign",
   :title "New campaign title",
   :limit "New maximum number of purchases allowed for this campaign",
   :stopDate "New date/time when the campaign ceases to be available",
   :campaignId "The ID of the campaign to update",
   :requireAddress
   "1 or 0. If 1, access to the campaign requires users to have a delivery address in their SPiD profile",
   :metaData "New meta-data",
   :description "New campaign description"},
  :method "*",
  :name "Get and update campaign",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional [],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns the campaign object",
      :type "campaign"}
     {:status 404,
      :description "No campaign with this ID",
      :type "api-exception"}]},
   :POST
   {:name "POST",
    :required [],
    :optional
    ["title"
     "description"
     "metaData"
     "status"
     "startDate"
     "stopDate"
     "additionalReceiptInfo"
     "requireAddress"
     "requireVoucher"
     "limit"
     "products"],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns the updated campaign object",
      :type "campaign"}
     {:status 404,
      :description "Campaign not found",
      :type "api-exception"}]}},
  :url "/api/2/campaign/{id}",
  :pathParameters ["campaignId"],
  :controller "Api/2/Campaign.campaign",
  :defaultOutputFormat "json",
  :description
  "Get a single campaign, with all it's products, or push changes to it.`products` must be an array of `productId` and `newPrice`. NB Products part does not work in explorer.",
  :category ["Payment Services" "Campaign API"]}
 {:path "campaign",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions
  {:additionalReceiptInfo "Text to include in purchase receipts",
   :requireVoucher
   "1 or 0. If 1, access to the campaign requires users to have a valid and available voucher",
   :startDate "Date/time when the campaign becomes available",
   :products "A list of products in this campaign",
   :limit "The maximum number of purchases allowed for this campaign",
   :stopDate "Date/time when the campaign ceases to be available",
   :requireAddress
   "1 or 0. If 1, access to the campaign requires users to have a delivery address in their SPiD profile",
   :metaData "Additional client meta-data, not used by SPiD",
   :description "The campaign description"},
  :method "POST",
  :name "Create campaign",
  :httpMethods
  {:POST
   {:name "POST",
    :required ["title"],
    :optional
    ["description"
     "metaData"
     "startDate"
     "stopDate"
     "additionalReceiptInfo"
     "requireAddress"
     "requireVoucher"
     "limit"
     "products"],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns the newly created campaign object",
      :type "campaign"}]}},
  :url "/api/2/campaign",
  :pathParameters [],
  :controller "Api/2/Campaign.campaign",
  :defaultOutputFormat "json",
  :description "",
  :category ["Payment Services" "Campaign API"]}
 {:path "campaigns",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions
  {:campaignId "Find the campaign with this ID",
   :title "Find campaigns with title `LIKE` this",
   :description "Find campaigns with description `LIKE` this",
   :status "Filter results by this status"},
  :method "GET",
  :name "List campaigns",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional
    ["limit"
     "offset"
     "sort"
     "filters"
     "campaignId"
     "title"
     "description"
     "status"],
    :accessTokenTypes ["server"],
    :filters
    ["updated"
     "all"
     "new"
     "active"
     "unavailable"
     "deleted"
     "products"],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns a list of campaigns",
      :type "[campaign]"}
     {:status 404,
      :description "No campaign matched search criteria",
      :type "api-exception"}]}},
  :url "/api/2/campaigns",
  :pathParameters [],
  :controller "Api/2/Campaign.campaigns",
  :defaultOutputFormat "json",
  :description "List all campaigns for client",
  :category ["Payment Services" "Campaign API"]}
 {:path "subscriptions",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions
  {:userId
   "Limit results by the user's `uuid` or `userId` (not to be mistaken with the deprecated `id`).",
   :status "Limit results to subscriptions with this status."},
  :method "GET",
  :name "Search subscriptions",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional
    ["limit"
     "offset"
     "sort"
     "since"
     "until"
     "filters"
     "userId"
     "status"],
    :accessTokenTypes ["server" "user"],
    :filters ["updated" "expired" "inactive" "active" "all" "none"],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "A list of Subscription objects.",
      :type "[subscription]"}]}},
  :url "/api/2/subscriptions",
  :pathParameters [],
  :controller "Api/2/Subscriptions.subscriptions",
  :defaultOutputFormat "json",
  :description "Search for subscriptions",
  :category ["Payment Services" "Subscription API"]}
 {:path "digitalcontents",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions
  {:userId "Limit results to digital content purchased by this user.",
   :status "Limit results to digital content with this status.",
   :productId "Limit results to digital content for this product.",
   :parentProductId
   "Limit results to digital content for this product and its child products."},
  :method "GET",
  :name "Search digital content",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional
    ["limit"
     "offset"
     "sort"
     "since"
     "until"
     "filters"
     "userId"
     "status"
     "productId"
     "parentProductId"],
    :accessTokenTypes ["server"],
    :filters ["updated" "expired" "active" "all" "none"],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "A list of DigitalContent objects.",
      :type "[digital-content]"}]}},
  :url "/api/2/digitalcontents",
  :pathParameters [],
  :controller "Api/2/Digitalcontents.digitalcontents",
  :defaultOutputFormat "json",
  :description "Search for purchased digital content",
  :category ["Payment Services" "Digital Contents API"]}
 {:path "kpis",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions
  {:name
   "The name of one or more KPIs to query for, comma-separated. See the list of available KPIs above."},
  :method "GET",
  :name "Search KPI",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional ["name" "limit" "offset" "sort" "since" "until"],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "A list of KeyPerformanceIndicator objects",
      :type "[kpi]"}
     {:status 404,
      :description "No KPI by this name",
      :type "api-exception"}]}},
  :url "/api/2/kpis",
  :pathParameters [],
  :controller "Api/2/KeyPerformanceIndicator.kpi",
  :defaultOutputFormat "json",
  :description "Search for Key Performance Indicators",
  :category ["Insight" "KPI API"]}
 {:path "paylink",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions
  {:clientReference
   "Your reference. Useful for tracking and processing the Order generated by this PayLink.",
   :items "The items to be sold. A list of PayLink Item objects.",
   :cancelUri
   "Redirect the user to this URL if login or payment is cancelled.",
   :expires
   "The date when the PayLink expires. A unix timestamp. Defaults to 24 hours from creation.",
   :buyerUserId "If set, only this user has access to the PayLink.",
   :title
   "The PayLink title. Displayed to the user on the payment page, and shown on the New Credit Card page at Payex.",
   :paymentOptions
   "The allowed payment methods for this PayLink. Payment options can be provided in two formats: as an integer bit mask or as a JSON array of objects (this format allows providing data for external payment methods). Defaults to integer bitmask, 2 (bank card with PayEx).",
   :purchaseFlow
   "Defaults to `DIRECT`, which will process the payment straight away. Can also be `AUTHORIZE`, where the payment is on hold and must later be captured.",
   :redirectUri
   "Redirect the user to this URL after payment is complete."},
  :method "POST",
  :name "Create PayLink",
  :httpMethods
  {:POST
   {:name "POST",
    :required ["title" "items"],
    :optional
    ["clientReference"
     "purchaseFlow"
     "paymentOptions"
     "expires"
     "redirectUri"
     "cancelUri"
     "buyerUserId"],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns the newly created paylink object",
      :type "paylink"}
     {:status 400,
      :description "Missing one or more required parameters",
      :type "api-exception"}
     {:status 400,
      :description "Paylink items is not a list of items",
      :type "api-exception"}
     {:status 400,
      :description "Validation error(s)",
      :type "api-exception"}
     {:status 404,
      :description "Paylink not found",
      :type "api-exception"}]}},
  :url "/api/2/paylink",
  :pathParameters [],
  :controller "Api/2/Paylink.paylink",
  :defaultOutputFormat "json",
  :description "Create a PayLink object",
  :category ["Payment Services" "PayLink API"]}
 {:path "p2plink",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions
  {:sellerUserId
   "If set, this user is designated as the seller and will receive the payment.",
   :clientReference
   "Your reference. Useful for tracking and processing the Order generated by this PayLink.",
   :items "The items to be sold. A list of PayLink Item objects.",
   :cancelUri
   "Redirect the user to this URL if login or payment is cancelled.",
   :expires
   "The date when the PayLink expires. A unix timestamp. Defaults to 24 hours from creation.",
   :buyerUserId "If set, only this user has access to the PayLink.",
   :title
   "The PayLink title. Displayed to the user on the payment page, and shown on the New Credit Card page at Payex.",
   :paymentOptions
   "The allowed payment methods for this PayLink. An integer bitmask: Credit (1), Credit cards (2), SMS (4), Invoice (8). Defaults to 2.",
   :purchaseFlow
   "Defaults to `DIRECT`, which will process the payment straight away. Can also be `AUTHORIZE`, where the payment is on hold and must later be captured.",
   :redirectUri
   "Redirect the user to this URL after payment is complete."},
  :method "POST",
  :name "Create P2pLink",
  :httpMethods
  {:POST
   {:name "POST",
    :required ["title" "items" "hash"],
    :optional
    ["clientReference"
     "purchaseFlow"
     "paymentOptions"
     "expires"
     "redirectUri"
     "cancelUri"
     "sellerUserId"
     "buyerUserId"],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns the newly created paylink object",
      :type "paylink"}
     {:status 400,
      :description "Missing one or more required parameters",
      :type "api-exception"}
     {:status 400,
      :description "Paylink items is not a list of items",
      :type "api-exception"}
     {:status 400,
      :description "Validation error(s)",
      :type "api-exception"}
     {:status 404,
      :description "Paylink not found",
      :type "api-exception"}]}},
  :url "/api/2/p2plink",
  :pathParameters [],
  :controller "Api/2/Paylink.p2plink",
  :defaultOutputFormat "json",
  :description "Create a PayLink object",
  :category ["Payment Services" "P2pLink API"]}
 {:path "paylink/{paylinkId}/use",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions {:paylinkId "ID of the paylink"},
  :method "POST",
  :name "Use Paylink",
  :httpMethods
  {:POST
   {:name "POST",
    :required ["paylinkId"],
    :optional [],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Paylink is unlocked",
      :type "api-exception"}
     {:status 400,
      :description "Bad request. 'paylinkId' is not a valid integer",
      :type "api-exception"}
     {:status 400,
      :description "Paylink is already locked",
      :type "api-exception"}
     {:status 404,
      :description "Paylink not found",
      :type "api-exception"}
     {:status 404,
      :description "Paylink is expired",
      :type "api-exception"}
     {:status 404,
      :description "Paylink is used or deleted",
      :type "api-exception"}]}},
  :url "/api/2/paylink/{id}/use",
  :pathParameters ["paylinkId"],
  :controller "Api/2/Paylink.paylink_use",
  :defaultOutputFormat "json",
  :description "Set \"used\" status to Paylink",
  :category ["Payment Services" "PayLink API"]}
 {:path "paylink/{paylinkId}/unlock",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions {:paylinkId "ID of the paylink"},
  :method "POST",
  :name "Unlock Paylink",
  :httpMethods
  {:POST
   {:name "POST",
    :required ["paylinkId"],
    :optional [],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Paylink is unlocked",
      :type "api-exception"}
     {:status 400,
      :description "Bad request. 'paylinkId' is not a valid integer",
      :type "api-exception"}
     {:status 400,
      :description "Paylink isn't locked",
      :type "api-exception"}
     {:status 404,
      :description "Paylink not found",
      :type "api-exception"}
     {:status 404,
      :description "Paylink is expired",
      :type "api-exception"}
     {:status 404,
      :description "Paylink is used or deleted",
      :type "api-exception"}]}},
  :url "/api/2/paylink/{id}/unlock",
  :pathParameters ["paylinkId"],
  :controller "Api/2/Paylink.paylink_unlock",
  :defaultOutputFormat "json",
  :description
  "Set \"available\" status to Paylink only if It's already locked",
  :category ["Payment Services" "PayLink API"]}
 {:path "paylink/{paylinkId}/lock",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions {:paylinkId "ID of the paylink"},
  :method "POST",
  :name "Lock Paylink",
  :httpMethods
  {:POST
   {:name "POST",
    :required ["paylinkId"],
    :optional [],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Paylink is unlocked",
      :type "api-exception"}
     {:status 400,
      :description "Bad request. 'paylinkId' is not a valid integer",
      :type "api-exception"}
     {:status 400,
      :description "Paylink is already locked",
      :type "api-exception"}
     {:status 404,
      :description "Paylink not found",
      :type "api-exception"}
     {:status 404,
      :description "Paylink is expired",
      :type "api-exception"}
     {:status 404,
      :description "Paylink is used or deleted",
      :type "api-exception"}]}},
  :url "/api/2/paylink/{id}/lock",
  :pathParameters ["paylinkId"],
  :controller "Api/2/Paylink.paylink_lock",
  :defaultOutputFormat "json",
  :description "Set \"lock\" status to Paylink",
  :category ["Payment Services" "PayLink API"]}
 {:path "paylink/{paylinkId}",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions
  {:paylinkId
   "ID or UUID of the paylink to retrieve. UUID will be introduced on 1st of September 2017."},
  :method "*",
  :name "Get or delete a paylink",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional [],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200, :description "The paylink object", :type "paylink"}
     {:status 404,
      :description "Paylink not found",
      :type "api-exception"}]},
   :DELETE
   {:name "DELETE",
    :required [],
    :optional [],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description
      "A paylink object, with its status changed to -1 (deleted)",
      :type "paylink"}
     {:status 404,
      :description "Paylink not found",
      :type "api-exception"}]}},
  :url "/api/2/paylink/{id}",
  :pathParameters ["paylinkId"],
  :controller "Api/2/Paylink.paylink",
  :defaultOutputFormat "json",
  :description "Get or delete a Paylink object",
  :category ["Payment Services" "PayLink API"]}
 {:path "logins",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions
  {:ip "Filter login attempts by this IP address",
   :status
   "Filter login attempts by successful (`true`) or failed (`false`) logins",
   :filters
   "Set to `merchant` to show only login attempts for the current merchant."},
  :method "GET",
  :name "Search logins",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional
    ["limit" "since" "offset" "until" "ip" "status" "filters"],
    :accessTokenTypes ["server"],
    :filters ["merchant"],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "A list of login attempt objects.",
      :type "[login-attempt]"}]}},
  :url "/api/2/logins",
  :pathParameters [],
  :controller "Api/2/User.logins",
  :defaultOutputFormat "json",
  :description "Query login attempts for a client.",
  :category ["Identity Management" "Login API"]}
 {:path "logout",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions {},
  :method "GET",
  :name "Logout",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional [],
    :accessTokenTypes ["server" "user"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description
      "The response simply says \"OK\" when the user is logged out.",
      :type "string"}]}},
  :url "/api/2/logout",
  :pathParameters [],
  :controller "Api/2/User.logout",
  :defaultOutputFormat "json",
  :description "Invalidate the user's SPiD session.",
  :category ["Identity Management" "Login API"]}
 {:path "user/{id}/level",
  :validOutputFormats ["json"],
  :parameterDescriptions {:id "User ID"},
  :method "GET",
  :name "User verification level",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional [],
    :accessTokenTypes [],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns a verification level and user_id",
      :type "userlevel"}
     {:status 404,
      :description "User not verified",
      :type "api-exception"}
     {:status 403,
      :description "Token is not authorized to access this user",
      :type "api-exception"}]}},
  :url "/api/2/user/{id}/level",
  :pathParameters ["id"],
  :controller "Api/2/User.user_level",
  :defaultOutputFormat "json",
  :description "Get the user verification level",
  :category ["Identity Management" "User API"]}
 {:path "passwordless/start",
  :validOutputFormats ["json"],
  :parameterDescriptions
  {:connection
   "Either \"sms\" or \"email\" depending on what kind of passwordless auth is required",
   :phoneNumber "Phone number if doing SMS auth",
   :email "Email address if doing email auth",
   :locale "Locale with which to send the message"},
  :method "POST",
  :name "Passwordless authentication",
  :httpMethods
  {:POST
   {:name "POST",
    :required ["connection"],
    :optional ["phoneNumber" "email" "locale"],
    :accessTokenTypes [],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Passwordless email or SMS sent",
      :type "passwordlessToken"}
     {:status 400,
      :description "Missing connection",
      :type "api-exception"}
     {:status 400,
      :description "Invalid/empty phone or email",
      :type "api-exception"}
     {:status 403,
      :description "Token is not authorized to access this endpoint",
      :type "api-exception"}]}},
  :url "/api/2/passwordless/start",
  :pathParameters [],
  :controller "Api/2/Passwordless.passwordless_start",
  :defaultOutputFormat "json",
  :description
  "Trigger sending of SMS and/or email for passwordless authentication",
  :category ["Identity Management" "Authentication API"]}
 {:path "passwordless/resend",
  :validOutputFormats ["json"],
  :parameterDescriptions
  {:passwordlessToken
   "Original passwordless token from /passwordless/start"},
  :method "POST",
  :name "Passwordless code resend",
  :httpMethods
  {:POST
   {:name "POST",
    :required ["passwordlessToken"],
    :optional [],
    :accessTokenTypes [],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Passwordless email or SMS re-sent",
      :type "passwordlessToken"}
     {:status 400,
      :description "Missing passwordlessToken",
      :type "api-exception"}
     {:status 403,
      :description "Token is not authorized to access this endpoint",
      :type "api-exception"}
     {:status 429,
      :description "Too many attempts made to resend code",
      :type "api-exception"}]}},
  :deprecated "2.108",
  :url "/api/2/passwordless/resend",
  :pathParameters [],
  :controller "Api/2/Passwordless.passwordless_resend",
  :defaultOutputFormat "json",
  :description
  "Trigger re-sending of SMS and/or email for passwordless authentication",
  :category ["Identity Management" "Authentication API"]}
 {:path "merchant/{merchant_id}/agreements",
  :validOutputFormats ["json"],
  :parameterDescriptions {:merchant_id "Merchant ID"},
  :method "*",
  :name "Agreements list",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional [],
    :accessTokenTypes ["server" "user"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns a list of agreement objects",
      :type "[agreement]"}
     {:status 403,
      :description "Token does not have access to this merchant",
      :type "api-exception"}]},
   :POST
   {:name "POST",
    :required ["markdown"],
    :optional ["date" "markdown_summary" "title" "privacy_url"],
    :accessTokenTypes ["server" "user"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 201,
      :description "Returns the newly created agreenebt object",
      :type "agreement"}
     {:status 400,
      :description "Missing required parameters or similar error",
      :type "api-exception"}
     {:status 403,
      :description "Token does not have access to this merchant",
      :type "api-exception"}]}},
  :url "/api/2/merchant/{<\\d+>merchant_id}/agreements",
  :pathParameters ["merchant_id"],
  :controller "Api/2/Agreement.agreements",
  :defaultOutputFormat "json",
  :description "Get agreements or create new one",
  :category ["Self Service" "Self Service API"]}
 {:path "merchant/{merchant_id}/agreements/assign",
  :validOutputFormats ["json"],
  :parameterDescriptions {:merchant_id "Merchant ID"},
  :method "POST",
  :name "Agreement assignment",
  :httpMethods
  {:POST
   {:name "POST",
    :required ["term_id" "client_id"],
    :optional [],
    :accessTokenTypes ["server" "user"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 201,
      :description "Assignment created successfully",
      :type "agreement"}
     {:status 400,
      :description "Missing required parameters or similar error",
      :type "api-exception"}
     {:status 404,
      :description "The client or agreement not found",
      :type "api-exception"}
     {:status 403,
      :description "Token does not have access to this merchant",
      :type "api-exception"}]}},
  :url "/api/2/merchant/{<\\d+>merchant_id}/agreements/assign",
  :pathParameters ["merchant_id"],
  :controller "Api/2/Agreement.assign_agreement",
  :defaultOutputFormat "json",
  :description "Assign agreement to client",
  :category ["Self Service" "Self Service API"]}
 {:path "merchant/{merchant_id}/agreements/{id}",
  :validOutputFormats ["json"],
  :parameterDescriptions
  {:merchant_id "Merchant ID", :id "Agreement ID"},
  :method "*",
  :name "Agreement get or update",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional [],
    :accessTokenTypes ["server" "user"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns an agreement object",
      :type "agreement"}
     {:status 403,
      :description "Token does not have access to this merchant",
      :type "api-exception"}]},
   :POST
   {:name "POST",
    :required [],
    :optional
    ["markdown" "markdown_summary" "date" "title" "privacy_url"],
    :accessTokenTypes ["server" "user"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns the updated agreement object",
      :type "agreement"}
     {:status 400,
      :description
      "Missing required parameters, or agreement not found",
      :type "api-exception"}
     {:status 403,
      :description "Token does not have access to this merchant",
      :type "api-exception"}]}},
  :url "/api/2/merchant/{<\\d+>merchant_id}/agreements/{id}",
  :pathParameters ["merchant_id" "id"],
  :controller "Api/2/Agreement.agreement",
  :defaultOutputFormat "json",
  :description "Get or update an agreement",
  :category ["Self Service" "Self Service API"]}
 {:path "merchant/{merchant_id}/trackergroups",
  :validOutputFormats ["json"],
  :parameterDescriptions {:merchant_id "Merchant ID"},
  :method "*",
  :name "Tracker groups list",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional [],
    :accessTokenTypes ["server" "user"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns a list of tracker group objects",
      :type "[trackergroup]"}
     {:status 403,
      :description "Token does not have access to this merchant",
      :type "api-exception"}]},
   :POST
   {:name "POST",
    :required ["name"],
    :optional [],
    :accessTokenTypes ["server" "user"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 201,
      :description "Returns the newly created tracker group object",
      :type "trackergroup"}
     {:status 400,
      :description "Missing required parameters or similar error",
      :type "api-exception"}
     {:status 403,
      :description "Token does not have access to this merchant",
      :type "api-exception"}]}},
  :url "/api/2/merchant/{<\\d+>merchant_id}/trackergroups",
  :pathParameters ["merchant_id"],
  :controller "Api/2/TrackerGroup.trackergroups",
  :defaultOutputFormat "json",
  :description "Get tracker groups or create new one",
  :category ["Self Service" "Self Service API"]}
 {:path "merchant/{merchant_id}/admins",
  :validOutputFormats ["json"],
  :parameterDescriptions
  {:merchant_id "Merchant ID",
   :type "Type of Admin",
   :email "E-mail addresses, comma separated",
   :services "Array of services"},
  :method "*",
  :name "Get or Create admins of merchant",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional ["type"],
    :accessTokenTypes ["server" "user"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns a list of admins for merchant",
      :type "[admin]"}
     {:status 403,
      :description "Token does not have access to this merchant",
      :type "api-exception"}]},
   :POST
   {:name "POST",
    :required ["email" "services" "type"],
    :optional [],
    :accessTokenTypes ["server" "user"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 201,
      :description "Creates and returns a newly created admin",
      :type "admin"}
     {:status 400,
      :description "Missing required parameters or similar error",
      :type "api-exception"}
     {:status 403,
      :description "Token does not have access to this merchant",
      :type "api-exception"}]}},
  :url "/api/2/merchant/{<\\d+>merchant_id}/admins",
  :pathParameters ["merchant_id"],
  :controller "Api/2/MerchantAdmin.merchant_admins",
  :defaultOutputFormat "json",
  :description "Get or Create admins of merchant",
  :category ["Self Service" "Self Service API"]}
 {:path "merchant/{merchant_id}/admin/{admin_id}",
  :validOutputFormats ["json"],
  :parameterDescriptions
  {:merchant_id "Merchant ID", :admin_id "Admin ID"},
  :method "*",
  :name "Update or Delete admin of merchant",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional [],
    :accessTokenTypes ["server" "user"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200, :description "Returns an admin", :type "admin"}
     {:status 403,
      :description "Token does not have access to this merchant",
      :type "api-exception"}]},
   :POST
   {:name "POST",
    :required ["services"],
    :optional [],
    :accessTokenTypes ["server" "user"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200, :description "Updates an admin", :type "admin"}
     {:status 403,
      :description "Token does not have access to this merchant",
      :type "api-exception"}]},
   :DELETE
   {:name "DELETE",
    :required [],
    :optional [],
    :accessTokenTypes ["server" "user"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Deletes an admin access to service",
      :type "admin"}
     {:status 403,
      :description "Token does not have access to this merchant",
      :type "api-exception"}]}},
  :url "/api/2/merchant/{<\\d+>merchant_id}/admin/{<\\d+>admin_id}",
  :pathParameters ["merchant_id" "admin_id"],
  :controller "Api/2/MerchantAdmin.merchant_admin",
  :defaultOutputFormat "json",
  :description "Update or Delete admin of merchant",
  :category ["Self Service" "Self Service API"]}
 {:path "merchant/{merchant_id}/trackergroups/{id}",
  :validOutputFormats ["json"],
  :parameterDescriptions
  {:merchant_id "Merchant ID", :id "Tracker group ID"},
  :method "*",
  :name "Tracker group get",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional [],
    :accessTokenTypes ["server" "user"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns a tracker group object",
      :type "trackergroup"}
     {:status 403,
      :description "Token does not have access to this merchant",
      :type "api-exception"}]},
   :POST
   {:name "POST",
    :required ["name"],
    :optional [],
    :accessTokenTypes ["server" "user"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "Returns the updated tracker group object",
      :type "trackergroup"}
     {:status 400,
      :description "Missing required parameters, or group not found",
      :type "api-exception"}
     {:status 403,
      :description "Token does not have access to this merchant",
      :type "api-exception"}]}},
  :url "/api/2/merchant/{<\\d+>merchant_id}/trackergroups/{<\\d+>id}",
  :pathParameters ["merchant_id" "id"],
  :controller "Api/2/TrackerGroup.trackergroup",
  :defaultOutputFormat "json",
  :description "Get or update one tracker group",
  :category ["Self Service" "Self Service API"]}
 {:path "settings",
  :validOutputFormats ["json"],
  :parameterDescriptions {},
  :method "GET",
  :name "Platform settings",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional [],
    :accessTokenTypes ["server"],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 200,
      :description "A list of platform settings",
      :type "object"}
     {:status 401,
      :description "No token passed or invalid token",
      :type "api-exception"}
     {:status 403,
      :description "Not authorized to access",
      :type "api-exception"}]}},
  :url "/api/2/settings",
  :pathParameters [],
  :controller "Api/2/Platform.settings",
  :defaultOutputFormat "json",
  :description "Platform settings endpoint for external services.",
  :category ["Utilities" "Platform API"]}
 {:path "api/2/*",
  :validOutputFormats ["json" "jsonp"],
  :parameterDescriptions {},
  :method "*",
  :name "Not found error - 404",
  :httpMethods
  {:GET
   {:name "GET",
    :required [],
    :optional [],
    :accessTokenTypes [],
    :filters [],
    :defaultFilters [],
    :responses
    [{:status 404, :description "No such endpoint.", :type "error"}]}},
  :url "/api/*",
  :pathParameters [],
  :controller "Api/2/Utility.not_found",
  :defaultOutputFormat "json",
  :description
  "Response when requesting an endpoint that does not exist.",
  :category ["Utilities" "Platform API"]}]
